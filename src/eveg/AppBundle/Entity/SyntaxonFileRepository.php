<?php

namespace eveg\AppBundle\Entity;

/**
 * SyntaxonFileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SyntaxonFileRepository extends \Doctrine\ORM\EntityRepository
{
	public function getPublicSpreadsheets($limitResults = null)
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
			->where('f.type = :spreadsheet')
			->andWhere('f.visibility = :public')
			->leftJoin('f.syntaxonCore', 'syntaxonCore')
			->setParameter('spreadsheet', 'spreadsheet')
			->setParameter('public', 'public')
			->addSelect('syntaxonCore')
			;

		if($limitResults) {
			$qb->setMaxResults($limitResults);
		}

		return $qb->getQuery()->getResult();
	}

	public function getPublicPdfs($limitResults = null)
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
			->where('f.type = :pdf')
			->andWhere('f.visibility = :public')
			->leftJoin('f.syntaxonCore', 'syntaxonCore')
			->setParameter('pdf', 'pdf')
			->setParameter('public', 'public')
			->addSelect('syntaxonCore')
			;
		if($limitResults) {
			$qb->setMaxResults($limitResults);
		}

		return $qb->getQuery()->getResult();
	}

	public function getPublicSpreadsheetsWithoutSCoreRelation()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
			->where('f.type = :spreadsheet')
			->andWhere('f.visibility = :public')
			->setParameter('spreadsheet', 'spreadsheet')
			->setParameter('public', 'public')
			;

		return $qb->getQuery()->getResult();
	}

	public function getPublicPdfsWithoutSCoreRelation()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
			->where('f.type = :pdf')
			->andWhere('f.visibility = :public')
			->setParameter('pdf', 'pdf')
			->setParameter('public', 'public')
			;

		return $qb->getQuery()->getResult();
	}

	public function getPublicDocumentsOrderByDatetime($limitResults = null, $since = null)
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
			->where('f.visibility = :public')
			->orderBy('f.uploadedAt', 'DESC')
			->leftJoin('f.user', 'user')
			->leftJoin('f.syntaxonCore', 'score')
			->setParameter('public', 'public')
			->addSelect('user')
			->addSelect('score')
			;
		if($limitResults) {
			$qb->setMaxResults($limitResults);
		}
		if($since) {
			$qb->andWhere('f.uploadedAt > :since')
			   ->setParameter('since', $since);
		}

		return $qb->getQuery()->getResult();
	}

	public function getNbPublic()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('COUNT(f)')
		   ->where('f.visibility = :public')
		   ->andWhere('f.linked = :false')
		   ->setParameter('public', 'public')
		   ->setParameter('false', false)
		   ;

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getNbSpreadsheets()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('COUNT(f)')
		   ->where('f.type = :spreadsheet')
		   ->andWhere('f.linked = :false')
		   ->setParameter('spreadsheet', 'spreadsheet')
		   ->setParameter('false', false)
		   ;

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getNbPdfs()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('COUNT(f)')
		   ->where('f.type = :pdf')
		   ->andWhere('f.linked = :false')
		   ->setParameter('pdf', 'pdf')
		   ->setParameter('false', false)
		   ;

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getMostDownloaded($limitResults = null)
	{
		$qb = $this->createQueryBuilder('f');

		$qb->orderBy('f.hit', 'DESC');

		if($limitResults) {
			$qb->setMaxResults($limitResults);
		}

		return $qb->getQuery()->getResult();
	}

	public function getSumDownloadedSpreadsheets()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('SUM(f.hit)')
		   ->where('f.type = :spreadsheet')
		   ->setParameter('spreadsheet', 'spreadsheet');

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getSumDownloadedPdfs()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('SUM(f.hit)')
		   ->where('f.type = :pdf')
		   ->setParameter('pdf', 'pdf');

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getPublicFiles()
	{
		$qb = $this->createQueryBuilder('f');

		$qb->select('f')
		   ->where('f.visibility = :public')
		   ->andWhere('f.linked = :false')
		   ->setParameter('public', 'public')
		   ->setParameter('false', false)
		   ->orderBy('f.fileName', 'ASC')
		;

		return $qb->getQuery()->getResult();
	}
}
